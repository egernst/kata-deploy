---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kata-scripts
  namespace: kube-system
data:
  install-kata-containerd.sh: |
    #!/bin/sh

    ## move Kata artifacts to /opt
    echo "copying kata artifacts from /tmp to /opt"
    cp -R /tmp/kata/* /opt/kata/
    chmod +x /opt/kata/bin/*

    cp /opt/kata/configuration.toml /usr/share/defaults/kata-containers/configuration.toml

    ## Configure containerd to use Kata:
    echo "create containerd configuration for Kata"
    mkdir -p /etc/containerd/

    cat << EOT | tee /etc/containerd/config.toml
    [plugins]
        [plugins.cri.containerd]
          snapshotter = "overlayfs"
          [plugins.cri.containerd.default_runtime]
            runtime_type = "io.containerd.runtime.v1.linux"
            runtime_engine = ""
            runtime_root = ""
          [plugins.cri.containerd.untrusted_workload_runtime]
            runtime_type = "io.containerd.runtime.v1.linux"
            runtime_engine = "/opt/kata/bin/kata-runtime"
            runtime_root = ""
    EOT


    echo "Reload systemd services"
    systemctl daemon-reload
    systemctl restart containerd

  install-kata-crio.sh: |
    #!/bin/sh

    ## move Kata artifacts to /opt
    echo "copying kata artifacts from /tmp to /opt"
    cp -R /tmp/kata/* /opt/kata/

    chmod +x /opt/kata/bin/*

    cp /opt/kata/configuration.toml /usr/share/defaults/kata-containers/configuration.toml

    crio_config_file="/etc/crio/crio.conf"

    cp $crio_config_file $crio_config_file.bak

    cp /etc/crio/crio.conf /etc/crio/crio.conf.bak

    ## Configure CRIO to use Kata:

    ### Configure CRIO to use Kata:

    ## Uncomment next line if you'd like to have default trust level for the cluster be "untrusted":
    # sed -i 's/default_workload_trust = "trusted"/default_workload_trust = "untrusted"/' "$crio_config_file"

    echo "Set Kata containers as default runtime in CRI-O for untrusted workloads"
    sed -i 's/runtime_untrusted_workload = ""/runtime_untrusted_workload = "\/opt\/kata\/bin\/kata-runtime"/' /etc/crio/crio.conf
    echo "Reload systemd services"

    systemctl daemon-reload
    systemctl restart crio

    ### Restart CRIO:

  remove-kata-containerd.sh: |
    #!/bin/sh

    ## move Kata artifacts to /opt
    echo "copying kata artifacts from /tmp to /opt"
    cp -R /tmp/kata/* /opt/kata/
    chmod +x /opt/kata/bin/*
    rm -rf /opt/kata
    rm -rf /usr/share/defaults/kata-containers
    rm -f /etc/containerd/config.toml

    echo "Reload systemd services"
    systemctl daemon-reload
    systemctl restart containerd

  remove-kata-crio.sh: |
    #!/bin/sh

    ## move Kata artifacts to /opt
    echo "copying kata artifacts from /tmp to /opt"
    rm -rf /opt/kata/
    rm -rf /usr/sahre/defaults/kata-containers

    crio_config_file="/etc/crio/crio.conf"

    cp $crio_config_file $crio_config_file.bak

    mv /etc/crio/crio.conf.bak /etc/crio/crio.conf

    echo "Reload systemd services"

    systemctl daemon-reload
    systemctl restart crio

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kata-label-node
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-labeler
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kata-label-node-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-labeler
subjects:
- kind: ServiceAccount
  name: kata-label-node
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-runtime-labeler
  namespace: kube-system
spec:
  selector:
      matchLabels:
        name: kubelet-runtime-labeler
  template:
    metadata:
        labels:
          name: kubelet-runtime-labeler
    spec:
      serviceAccountName: kata-label-node
      containers:
      - name: kubelet-runtime-labeler-pod
        image: egernst/kata-deploy
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "kubectl label node $NODE_NAME container-runtime-"]
        command: [ "sh", "-c" ]
        args:
        - printenv NODE_NAME;
          kubectl get node $NODE_NAME --show-labels;
          kubectl label node $NODE_NAME container-runtime=$(kubectl describe node $NODE_NAME | awk -F'[:]' '/Container Runtime Version/ {print $2}' |  tr -d ' ');
          kubectl get node $NODE_NAME --show-labels;
          while true;
          do sleep 30; done;
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: false
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-cri-o-kata
  namespace: kube-system
spec:
  selector:
      matchLabels:
        name: kubelet-cri-o-kata
  template:
    metadata:
        labels:
          name: kubelet-cri-o-kata
    spec:
      serviceAccountName: kata-label-node
      nodeSelector:
          container-runtime: cri-o
      containers:
      - name: kube-kata
        image: egernst/kata-deploy
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command: [ "sh", "-c", "/opt/kata/scripts/remove-kata-crio.sh && kubectl label node $NODE_NAME kata-runtime-"]
        command: [ "sh", "-c" ]
        args:
        - /opt/kata/scripts/install-kata-crio.sh && kubectl label node $NODE_NAME kata-runtime=true;
          kubectl get node $NODE_NAME --show-labels;
          while true;
          do sleep 36000; done;
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: false
        volumeMounts:
        - name: crio-conf
          mountPath: /etc/crio/
        - name: kata-conf
          mountPath: /usr/share/defaults/kata-containers/
        - name: kata-artifacts
          mountPath: /opt/kata/
        - name: kata-scripts
          mountPath: /opt/kata/scripts
        - name: dbus
          mountPath: /var/run/dbus
        - name: systemd
          mountPath: /run/systemd
      volumes:
        - name: crio-conf
          hostPath:
            path: /etc/crio/
        - name: kata-conf
          hostPath:
            path: /usr/share/defaults/kata-containers/
            type: DirectoryOrCreate
        - name: kata-artifacts
          hostPath:
            path: /opt/kata/
            type: DirectoryOrCreate
        - name: kata-scripts
          configMap:
            name: kata-scripts
            defaultMode: 484
        - name: dbus
          hostPath:
            path: /var/run/dbus
        - name: systemd
          hostPath:
            path: /run/systemd
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-cri-containerd-kata
  namespace: kube-system
spec:
  selector:
      matchLabels:
        name: kubelet-cri-containerd-kata
  template:
    metadata:
        labels:
          name: kubelet-cri-containerd-kata
    spec:
      serviceAccountName: kata-label-node
      nodeSelector:
          container-runtime: containerd
      containers:
      - name: kube-kata
        image: egernst/kata-deploy
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "/opt/kata/scripts/remove-kata-containerd.sh && kubectl label node $NODE_NAME kata-runtime-"]
        command: [ "sh", "-c" ]
        args:
        - /opt/kata/scripts/install-kata-containerd.sh && kubectl label node $NODE_NAME kata-runtime=true;
          kubectl get node $NODE_NAME --show-labels;
          while true;
          do sleep 30; done;
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: false
        volumeMounts:
        - name: containerd-conf
          mountPath: /etc/containerd/
        - name: kata-conf
          mountPath: /usr/share/defaults/kata-containers/
        - name: kata-artifacts
          mountPath: /opt/kata/
        - name: kata-scripts
          mountPath: /opt/kata/scripts
        - name: dbus
          mountPath: /var/run/dbus
        - name: systemd
          mountPath: /run/systemd
      volumes:
        - name: containerd-conf
          hostPath:
            path: /etc/containerd/
            type: DirectoryOrCreate
        - name: kata-conf
          hostPath:
            path: /usr/share/defaults/kata-containers/
            type: DirectoryOrCreate
        - name: kata-artifacts
          hostPath:
            path: /opt/kata/
            type: DirectoryOrCreate
        - name: kata-scripts
          configMap:
            name: kata-scripts
            defaultMode: 484
        - name: dbus
          hostPath:
            path: /var/run/dbus
        - name: systemd
          hostPath:
            path: /run/systemd
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
